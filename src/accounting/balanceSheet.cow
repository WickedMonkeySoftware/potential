accounting :context {
	balanceSheet :aggregate {
		id :guid;
		userId :link to user->person->id;

		// properties
		// nothing here, this is an aggregate root

		// computed
		latestCashBalance :decimal {
			let lastCash = accounting->balanceSheet->cash[sheet = ~id]&[date = max(^date)];

			is lastCash[0]->totalBalance;
		}

		// initializer
		CreatedBalanceSheet :initializer (userId :guid) {
			let ~id = new :guid;
			let ~userId = userId;

			fire UpdatedCashBalance (0.0, ~id);
			fire UpdatedAvailableCredit (0.0, 0.0, 0.0, 0.0, ~id);
		}

		// aggregates
		cash :aggregate {
			id :guid
			sheet :link to accounting->balanceSheet->id

			// properties
			totalBalance :decimal;
			date :dateTime;

			// initializers
			UpdatedCashBalance :initializer (newBalance :decimal, sheet :guid) {
				let ~id = new :guid;
				let ~sheet = sheet;
				let ~totalBalance = newBalance;
				let ~date = :dateTime->now;
			}
		}

		credit :aggregate {
			id :guid;
			sheet :link to accounting->balanceSheet->id

			// properties
			totalCredit :decimal;
			availableCredit :decimal;
			targetRatio :decimal;
			minimumPayment :decimal;
			date :dateTime;

			// computed
			usedCredit :decimal {
				is ~totalCredit - ~availableCredit;
			}

			percentUsed :decimal {
				is ~usedCredit / ~totalCredit;
			}

			remainingCredit :decimal {
				if (~totalCredit * ~targetRatio - ~usedCredit > 0) {
					is ~totalCredit * ~targetRatio - ~usedCredit > 0;
				}
				else {
					is 0;
				}
			}

			recommendedPayment :decimal {
				if (((~totalCredit * ~targetRatio) - ~usedCredit) * -1 > 0) {
					is ((~totalCredit * ~targetRatio) - ~usedCredit) * -1;
				}
				else {
					is ~minimumPayment;
				}
			}

			// initializers
			UpdatedAvailableCredit :initializer (availableCredit :decimal, totalCredit :decimal, targetRatio :decimal, minimumPayment :decimal, sheet :guid) {
				let ~id = new :guid;
				let ~sheet = sheet;
				let ~totalCredit = totalCredit;
				let ~targetRatio = targetRatio;
				let ~minimumPayment = minimumPayment;
				let ~date = :dateTime->now;
			}
		}
	}
}